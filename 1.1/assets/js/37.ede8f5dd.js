(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{218:function(e,a,o){"use strict";o.r(a);var t=o(0),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"build-and-deploy-an-application"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#build-and-deploy-an-application","aria-hidden":"true"}},[e._v("#")]),e._v(" Build and deploy an application")]),e._v(" "),o("p",[e._v("In this example, you will see how to build an image from source code, and then store it in the registry and use that image\nwhen deploying an application in the cluster.")]),e._v(" "),o("p",[e._v("As a prerequisite, you should provide a route for the image registry as outlined in the section "),o("a",{attrs:{href:"expose-registry"}},[e._v("Exposing the image registry")]),e._v(". You should also install a program that allows you to build images, for example, "),o("code",[e._v("podman")]),e._v(" or "),o("code",[e._v("docker")]),e._v(". To install "),o("code",[e._v("podman")]),e._v(" on Fedora:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ dnf install -y podman\n")])])]),o("p",[e._v("For more information on "),o("code",[e._v("podman")]),e._v(", see the RedHat article\n"),o("a",{attrs:{href:"https://developers.redhat.com/blog/2019/02/21/podman-and-buildah-for-docker-users/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Podman and Buildah for Docker users"),o("OutboundLink")],1),e._v(".")]),e._v(" "),o("h2",{attrs:{id:"build-the-image"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#build-the-image","aria-hidden":"true"}},[e._v("#")]),e._v(" Build the image")]),e._v(" "),o("p",[e._v("This example takes a simple NodeJS web application and builds an image using "),o("code",[e._v("podman")]),e._v(". Download the sample from GitHub:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ cd \n\n$ git clone https://github.com/gabrielmcg/helloworld-nodejs\n\n$ cd helloworld-nodejs\n")])])]),o("p",[e._v('The program creates a trivial web server and responds with the message "Hello World" when a user accesses the home page.\nThe following excerpt from '),o("code",[e._v("index.js")]),e._v(" shows the primary components of the application:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('const express = require("express");\nconst app = express();\n\napp.get("/", (req, res) => {\n  console.log("Hello world received a request.");\n\n  const target = process.env.TARGET || "World";\n  res.send(`Hello ${target}!`);\n\n});\n\n\nconst port = process.env.PORT || 8080;\napp.listen(port, () => {\n  console.log("Hello world listening on port", port);\n});\n\n')])])]),o("p",[e._v("The accompanying "),o("code",[e._v("Dockerfile")]),e._v(" builds an image based on the official "),o("code",[e._v("node:10")]),e._v(" image, installs dependencies, copies in the source code and starts the webserver. You can use the "),o("code",[e._v("podman")]),e._v(" or "),o("code",[e._v("docker")]),e._v(" command, depending on your setup, to build the image.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('$ podman build -t helloworld:v1 .\n\nSTEP 1: FROM node:10\nSTEP 2: WORKDIR /usr/src/app\n9f57296b3b50125d693af6f559d671d3a577a5f3ba07f9dc752d229709411cbb\nSTEP 3: COPY package*.json ./\nbd2ec027a14617a9cdbbadc9d3b8f3f55fd29611dda6e49d403e667d1ffe8c5e\nSTEP 4: RUN npm install --only=production\nnpm WARN helloworld-nodejs@1.0.0 No description\nnpm WARN helloworld-nodejs@1.0.0 No repository field.\n\nadded 48 packages from 36 contributors and audited 121 packages in 1.064s\nfound 0 vulnerabilities\n\n153a13d7ff2f69fa76d82bb9561ffdbe09fe29b3ddf490f07efde963922c2daf\nSTEP 5: COPY . .\n02a99699b19f7c1ae2cfa4ebf9653a15281d5fb757ab2c877fc287d5df812916\nSTEP 6: ENV PORT 8080\n1b6e214c8f29a74124098c994ad9eb32ef970e1525c03dc7aa346e4dffda7ea7\nSTEP 7: CMD [ "npm", "start" ]\nSTEP 8: COMMIT helloworld:v1\n3d05913e32f639e9d80f402e32c53be9471687b74fb5ff8e3c30353b0c835b41\n')])])]),o("p",[e._v("Check that the image has been created locally:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ podman images\n\nREPOSITORY                                 TAG      IMAGE ID       CREATED        SIZE\nlocalhost/helloworld                       v1       3d05913e32f6   17 hours ago   935 MB\n\n")])])]),o("h2",{attrs:{id:"create-the-project"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#create-the-project","aria-hidden":"true"}},[e._v("#")]),e._v(" Create the project")]),e._v(" "),o("p",[e._v("Create a new project named "),o("code",[e._v("helloworld")]),e._v(":")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('$ oc new-project helloworld\n\n\nNow using project "helloworld" on server "https://api.ocp.hpecloud.org:6443".\n\nYou can add applications to this project with the \'new-app\' command. For example, try:\n\n    oc new-app django-psql-example\n\nto build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n')])])]),o("h1",{attrs:{id:"tag-and-push-the-image"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tag-and-push-the-image","aria-hidden":"true"}},[e._v("#")]),e._v(" Tag and push the image")]),e._v(" "),o("p",[e._v("Tag the image before pushing to the local image registry, using the default route created earlier in the section\n"),o("a",{attrs:{href:"expose-registry"}},[e._v("Exposing the image registry")]),e._v(":")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ podman tag helloworld:v1 default-route-openshift-image-registry.apps.ocp.hpecloud.org/helloworld/helloworld:v1\n")])])]),o("p",[e._v("Log in to the local registry:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ podman login -u kubeadmin -p $(oc whoami -t) default-route-openshift-image-registry.apps.ocp.hpecloud.org --tls-verify=false\n\nLogin Succeeded!\n")])])]),o("p",[e._v("Push the image to the local registry:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ podman push  default-route-openshift-image-registry.apps.ocp.hpecloud.org/helloworld/helloworld:v1 --tls-verify=false\n\nGetting image source signatures\nCopying blob 553039093d83 done\nCopying blob 73bfa217d66f done\nCopying blob 91ecdd7165d3 done\nCopying blob e4b20fcc48f4 done\nCopying blob 5f3a5adb8e97 done\nCopying blob 2e517d68c391 done\nCopying blob 291f8a573386 done\nCopying blob 10a2b00f2be1 done\nCopying blob 86135eafe3c7 done\nCopying blob 3d8956424ab7 done\nCopying blob d51a74fa5b42 done\nCopying blob 8186e77df3b5 done\nCopying config 3d05913e32 done\nWriting manifest to image destination\nCopying config 3d05913e32 done\nWriting manifest to image destination\nStoring signatures\n")])])]),o("h2",{attrs:{id:"deploy-the-application"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#deploy-the-application","aria-hidden":"true"}},[e._v("#")]),e._v(" Deploy the application")]),e._v(" "),o("p",[e._v("Deploy the application to the cluster:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ kubectl create deployment helloworld --image=image-registry.openshift-image-registry.svc:5000/helloworld/helloworld:v1\n\ndeployment.apps/helloworld created\n")])])]),o("p",[e._v("Wait for the application to be ready:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ oc get deploy\nNAME         READY   UP-TO-DATE   AVAILABLE   AGE\nhelloworld   0/1     1            0           19s\n\n$ oc get pods\nNAME                         READY   STATUS              RESTARTS   AGE\nhelloworld-d7f944d95-xlg88   0/1     ContainerCreating   0          24s\n\n\n$ oc get pods\nNAME                         READY   STATUS    RESTARTS   AGE\nhelloworld-d7f944d95-xlg88   1/1     Running   0          38s\n")])])]),o("p",[e._v("Check the logs for this pod to ensure that the appication started successfully:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ oc logs helloworld-d7f944d95-xlg88\n\n> helloworld-nodejs@1.0.0 start /usr/src/app\n> node index.js\n\nHello world listening on port 8080\n")])])]),o("h2",{attrs:{id:"access-the-application"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#access-the-application","aria-hidden":"true"}},[e._v("#")]),e._v(" Access the application")]),e._v(" "),o("p",[e._v("Create a service for the application:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ oc expose deploy helloworld --port 8080\nservice/helloworld exposed\n\n$ oc get svc\nNAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nhelloworld   ClusterIP   172.30.110.14   <none>        8080/TCP   5s\n")])])]),o("p",[e._v("Test access to the service. First, establish a debug session on one of your nodes:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ oc debug nodes/ocp-master1\n\nStarting pod/ocp-master1-debug ...\nTo use host binaries, run `chroot /host`\nPod IP: 10.15.155.211\nIf you don't see a command prompt, try pressing enter.\nsh-4.2#\n")])])]),o("p",[e._v("Use the "),o("code",[e._v("curl")]),e._v(" command from the debug session to test access to the service from inside the cluster. You should see the message "),o("code",[e._v("Hello World")]),e._v(" displayed as a result of accessing the home page:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("sh-4.2# curl 172.30.110.14:8080\n\nHello World!\n\nsh-4.2# exit\n")])])]),o("h2",{attrs:{id:"access-from-outside-the-cluster"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#access-from-outside-the-cluster","aria-hidden":"true"}},[e._v("#")]),e._v(" Access from outside the cluster")]),e._v(" "),o("p",[e._v("Create a route to provide access from outside the cluster:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ oc expose svc/helloworld --name=helloworld\nroute.route.openshift.io/helloworld exposed\n\n$ oc get route\nNAME         HOST/PORT                                     PATH   SERVICES     PORT   TERMINATION   WILDCARD\nhelloworld   helloworld-helloworld.apps.ocp.hpecloud.org          helloworld   8080                 None\n")])])]),o("p",[e._v("You should now be able to access the application using this route from outside the cluster, for example, from your Ansible controller:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ curl helloworld-helloworld.apps.ocp.hpecloud.org\n\nHello World!\n")])])]),o("h2",{attrs:{id:"known-issue"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#known-issue","aria-hidden":"true"}},[e._v("#")]),e._v(" Known issue")]),e._v(" "),o("p",[o("strong",[e._v("Note:")]),e._v(" When you create the project, you are informed that you can use either "),o("code",[e._v("oc new-app")]),e._v(" or "),o("code",[e._v("kubectl deploy")]),e._v(":")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('$ oc new-project helloworld\n\nNow using project "helloworld" on server "https://api.ocp.hpecloud.org:6443".\n\nYou can add applications to this project with the \'new-app\' command. For example, try:\n\n    oc new-app django-psql-example\n\nto build a new example application in Python. Or use kubectl to deploy a simple Kubernetes application:\n\n    kubectl create deployment hello-node --image=gcr.io/hello-minikube-zero-install/hello-node\n')])])]),o("p",[e._v("It is possible that if you use the "),o("code",[e._v("oc new-app")]),e._v(" option, you may enocunter an issue relating to certificates:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('$ oc new-app default-route-openshift-image-registry.apps.ocp.hpecloud.org/helloworld/helloworld\n\nW1205 11:08:19.556016     991 dockerimagelookup.go:236] container image registry lookup failed: Get https://default-route-openshift-image-registry.apps.ocp.hpecloud.org/v2/: x509: certificate signed by unknown authority\nerror:  local file access failed with: stat default-route-openshift-image-registry.apps.ocp.hpecloud.org/helloworld/helloworld: no such file or directory\nerror: unable to locate any images in image streams, templates loaded in accessible projects, template files, local docker images with name "default-route-openshift-image-registry.apps.ocp.hpecloud.org/helloworld/helloworld"\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);