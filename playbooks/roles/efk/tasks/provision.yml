###
# Copyright (2019) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 
---
- name: Create temporary folder 
  tempfile:
    state: directory
    suffix: build
  register: tempdir
  changed_when: false

# Files required by Elastic
- set_fact:
    elastic_manifest_prelim: 'elastic_manifest_prelim_{{ ocp_version }}.yml'
    elastic_manifest_subscription: 'elastic_manifest_subscription_{{ ocp_version }}.yml.j2'
    elastic_manifest_final: 'elastic_manifest_final_{{ ocp_version }}.yml'

- name: Create preliminary artifacts for Elasticsearch
  k8s:
    state: present
    definition: "{{ lookup('file',elastic_manifest_prelim) }}"
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Retrieve Channel for Elasticsearch Subscription
  shell: |
    oc get packagemanifest elasticsearch-operator -n openshift-marketplace -o jsonpath='{.status.channels[].name}'
  register: channel
  changed_when: false
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Generate Subscription Object from template
  template:
    src: "{{ elastic_manifest_subscription }}"
    dest:  "{{ tempdir.path }}/elastic_manifest_subscription.yml"

- name: Create Subscription Object for Elastic
  k8s:
    state: present
    src:  "{{ tempdir.path }}/elastic_manifest_subscription.yml"
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Create Additional Objects for Elasticsearch
  k8s:
    state: present
    definition:  "{{ lookup('file',elastic_manifest_final) }}"
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Wait for Elasticsearch operator installation to complete
  k8s_facts:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: openshift-operators-redhat
  register: res
  delay: 10
  retries: 10
  until:
    - res.resources | json_query('[?status.*[? requirementStatus.name==`elasticsearch-operator`]]')
    - res.resources | json_query('[?status.*[? reason==`InstallSucceeded`]]')
    - res.resources | json_query('[?status.*[? phase==`Succeeded`]]')
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

# Files required by Cluster Logging
- set_fact:
    clo_manifest_prelim: 'clo_manifest_prelim_{{ ocp_version }}.yml'
    clo_manifest_subscription: 'clo_manifest_subscription_{{ ocp_version }}.yml.j2'
    clo_manifest_final: 'clo_manifest_final_{{ ocp_version }}.yml'

- name: Create preliminary artifacts for Cluster Logging
  k8s:
    state: present
    definition: "{{ lookup('file',clo_manifest_prelim) }}"
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Retrieve Channel for Cluster Logging Subscription
  shell: |
    oc get packagemanifest cluster-logging -n openshift-marketplace -o jsonpath='{.status.channels[].name}'
  register: channel
  changed_when: false
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

# At this stage in the console, under Operator Management, we should see a Custom Operator Catalog named Cluster Logging for the openshift-logging namespace
- name: Generate Subscription for Cluster Logging form template
  template:
    src: "{{ clo_manifest_subscription }}"
    dest:  "{{ tempdir.path }}/clo_manifest_subscription.yml"

- name: Create Cluster Logging Subscription
  k8s:
    state: present
    src: "{{ tempdir.path }}/clo_manifest_subscription.yml"
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

# At this stage in the console, under Operator Management, we should see a subscription for the openshift-logging namespace
- name: Wait for Cluster Logging Operator installation to complete
  k8s_facts:
    api_version: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    namespace: openshift-logging
  register: res
  delay: 10
  retries: 10
  until:
    - res.resources | json_query('[?status.*[? requirementStatus.name==`cluster-logging-operator`]]')
    - res.resources | json_query('[?status.*[? reason==`InstallSucceeded`]]')
    - res.resources | json_query('[?status.*[? phase==`Succeeded`]]')
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- set_fact:
    clo_manifest_crd: 'clo_manifest_crd_{{ ocp_version }}.yml.j2'

- name: Generate Cluster Logging CRD from template
  template:
    src: "{{ clo_manifest_crd }}"
    dest: "{{ tempdir.path }}/clo-crd.yml"

- name: Create Cluster Logging Instance
  k8s:
    state: present
    src: "{{ tempdir.path }}/clo-crd.yml"
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"
