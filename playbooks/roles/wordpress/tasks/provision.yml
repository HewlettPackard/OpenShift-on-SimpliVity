###
# Copyright (2019) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- name: Create a project for WordPress deployment
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        annotations:
          openshift.io/description: "{{ wp_desc }}"
          openshift.io/display-name: "{{ wp_disp_name }}"
        name: "{{ wp_proj_name }}"

- name: Allow WordPress to run as root to bind to port 80
  shell: oc -n  "{{ wp_proj_name }}" adm policy add-scc-to-user anyuid -z default
  register: res
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Create a storage class for WordPress and MySQL
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: "{{ wp_storage_name }}"
        namespace:  "{{ wp_proj_name }}"
      provisioner: kubernetes.io/vsphere-volume
      parameters:
        diskformat: thin
        datastore: "{{ datastores[0] }}"

- name: Create a PVC for MySQL
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: "{{ wp_proj_name }}"
        name: "{{ wp_mysql_pv_claim }}"
        labels:
          app: "{{ wp_app_name }}"
      spec:
        storageClassName: "{{ wp_storage_name }}"
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

- name: Create a PVC for WordPress
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: "{{ wp_proj_name }}"
        name: "{{ wp_wp_pv_claim }}"
        labels:
          app: "{{ wp_app_name }}"
      spec:
        storageClassName: "{{ wp_storage_name }}"
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

- name: Create MySQL secret password
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        namespace:  "{{ wp_proj_name }}"
        name: mysql-pass
      type: Opaque
      data:
        password: U2VjcmV0TXlTUUxQYXNzd29yZA==    # SecretMySQLPassword

- name: Create MySQL Deployment
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: "{{ wp_mysql_deploy }}"
        namespace:  "{{ wp_proj_name }}"
        labels:
          app: "{{ wp_app_name }}"
      spec:
        selector:
          matchLabels:
            app: "{{ wp_app_name }}"
            tier: mysql
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: "{{ wp_app_name }}"
              tier: mysql
          spec:
            containers:
            - image: mysql:5.6
              name: mysql
              env:
              - name: MYSQL_ROOT_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-pass
                    key: password
              ports:
              - containerPort: 3306
                name: mysql
              volumeMounts:
              - name: mysql-persistent-storage
                mountPath: /var/lib/mysql
            volumes:
            - name: mysql-persistent-storage
              persistentVolumeClaim:
                claimName: "{{ wp_mysql_pv_claim }}"

- name: Create WordPress Deployment
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: "{{ wp_wp_deploy }}"
        namespace:  "{{ wp_proj_name }}"
        labels:
          app: "{{ wp_app_name }}"
      spec:
        selector:
          matchLabels:
            app: "{{ wp_app_name }}"
            tier: frontend
        strategy:
          type: Recreate
        template:
          metadata:
            labels:
              app: "{{ wp_app_name }}"
              tier: frontend
          spec:
            containers:
            - image: wordpress:4.8-apache
              name: wordpress
              env:
              - name: WORDPRESS_DB_HOST
                value: "{{ wp_mysql_svc }}"
              - name: WORDPRESS_DB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: mysql-pass
                    key: password
              ports:
              - containerPort: 80
                name: wordpress
              volumeMounts:
              - name: wordpress-persistent-storage
                mountPath: /var/www/html
            volumes:
            - name: wordpress-persistent-storage
              persistentVolumeClaim:
                claimName: "{{ wp_wp_pv_claim }}"

- name: Create MySQL service 
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ wp_mysql_svc }}"
        namespace: "{{ wp_proj_name }}"
        labels:
          app: "{{ wp_app_name }}"
      spec:
        ports:
          - port: 3306
        selector:
          app: "{{ wp_app_name }}"
          tier: mysql
        ClusterIP: None

- name: Create WordPress service 
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: "{{ wp_wp_svc }}"
        namespace:  "{{ wp_proj_name }}"
        labels:
          app: "{{ wp_app_name }}"
      spec:
        ports:
          - port: 80
        selector:
          app: "{{ wp_app_name }}"
          tier: frontend
        type: NodePort

- name: Expose route to WordPress Webserver
  k8s:
    state: present
    kubeconfig: "{{ install_dir }}/auth/kubeconfig"
    definition:
      apiVersion: v1
      kind: Route
      metadata:
        annotations:
          openshift.io/host.generated: "true"
        labels:
          app: "{{ wp_app_name }}"
        name: "{{ wp_wp_route }}"
        namespace:  "{{ wp_proj_name }}"
      spec:
        host: "{{ wp_app_name }}.apps.{{ cluster_name }}.{{ domain_name }}"
        subdomain: ""
        to:
          kind: Service
          name: "{{ wp_wp_svc }}"
          weight: 100
        wildcardPolicy: None
      status:
        ingress:
        - conditions:
          routerName: default
          wildcardPolicy: None
