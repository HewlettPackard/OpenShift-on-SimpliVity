###
# Copyright (2019) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
### 

- name: Install k8s module prereq
  become: true
  package:
    name: python3-openshift
    state: present

- name: run Openshift installer and wait-for bootstrap-complete
  shell: |
   {{ ocp_installer_path }} --dir {{ install_dir }} wait-for bootstrap-complete
  register: res

- name: Get CSRs
  k8s_facts:
    api_version: certificates.k8s.io/v1beta1
    kind: CertificateSigningRequest
  register: res
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Build the list of Pending CSRs
  set_fact:
    pending_csr: "{{ res.resources | json_query(query) }}"
  vars:
    query:  '[?status.conditions[?type==`Pending`]].{"name": metadata.name, "conditions": status.conditions}'
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

# this portion of the code untested as I have never seen Pending CSRs except in the beta
- name: Approve Pending CSRs (if any)
  shell: |
     oc adm certificate approve {{ item }} 
  with_items:
    "{{ pending_csr }}"
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Wait for the image-registry operator to show up
  k8s_facts:
    kind: ClusterOperator
    name: image-registry
  register: res
  retries: "{{ ( ocpinstaller_imageregistry_timeout / 10 ) | int }}"
  until: 
  - res.resources is defined
  - res.resources | count > 0
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Create PV for Image Registry
  k8s:
    state: present
    definition:
      api_version: v1
      kind: PersistentVolume
      metadata:
        name: share0
      spec:
        storageClassName: nfs
        capacity:
          storage: 100Gi
        accessModes:
        - ReadWriteMany
        nfs:
          path: /srv/share0
          server: "{{ hostvars[groups['nfs'].0].ansible_host }}"
        persistentVolumeReclaimPolicy: Retain
  register: res
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Create PVC for Image Registry
  k8s:
    state: present
    definition:
      apiVersion: "v1"
      kind: "PersistentVolumeClaim"
      metadata:
        namespace: openshift-image-registry
        name: "image-registry-storage-nfs"
      spec:
        storageClassName: nfs
        accessModes:
          - "ReadWriteMany"
        resources:
          requests:
            storage: "100Gi"
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Configure Image Registry (NFS persistent volume)
  shell: |
    oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"pvc":{"claim":"image-registry-storage-nfs"}}}}'
  register: res
  environment:
    KUBECONFIG: "{{ install_dir }}/auth/kubeconfig"

- name: Stage watch_operators.sh script
  template:
    src: watch_operators.sh.j2
    dest: /tmp/watch_operators.sh
    mode: u=rx,g=r,o=r

#
# The iteration below is not functionaly necessary because 'wait-for install-complete' is doing the same verification
# However, because "wait-for" is silent and does not provide any kind of feedback to the user, the user might think
#   something is going wrong if the plabook does not print anything during 30mns 
# Because providing feedback is the sole purpose of the loop below, we don't fail the task if the cluster operators
#   are not "Available" in the amount of time specified by the timer. If the timer expires, the "wait-for" will decide
#   if the installation was successful or not
#
- name: Verify that all cluster operators are available 
  shell: |
    /tmp/watch_operators.sh
  register: res
  failed_when: false
  delay: 10
  retries: "{{ ( ocpinstaller_clusteroperators_timeout / 10 ) | int }}"
  until: res.stdout_lines | count == 0
 
- name: run openshift installer and wait-for install-complete
  shell: |
   {{ ocp_installer_path }} --dir {{ install_dir }} wait-for install-complete
  register: res

- debug:
    var: res
